/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /gh/objetos/p5.quadrille.js@0.9.5/p5.quadrille.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";class Quadrille{static BACKGROUND="white";static CHAR_COLOR="cyan";static NUMBER_COLOR="orange";static OUTLINE="magenta";static OUTLINE_WEIGHT=2;static CELL_LENGTH=100;static AND(t,e,i=0,r=0){return this.OP(t,e,((t,e)=>{if(t&&e)return t}),i,r)}static OR(t,e,i=0,r=0){return this.OP(t,e,((t,e)=>t||(e||void 0)),i,r)}static XOR(t,e,i=0,r=0){return this.OP(t,e,((t,e)=>t&&!e?t:!t&&e?e:void 0),i,r)}static DIFF(t,e,i=0,r=0){return this.OP(t,e,((t,e)=>{if(t&&!e)return t}),i,r)}static NEG(t,e){let i=new Quadrille(t.width,t.height);for(let r=0;r<t.height;r++)for(let l=0;l<t.width;l++)t._memory2D[r][l]||(i._memory2D[r][l]=e);return i}static OP(t,e,i,r=0,l=0){let h=new Quadrille(l<0?Math.max(e.width,t.width-l):Math.max(t.width,e.width+l),r<0?Math.max(e.height,t.height-r):Math.max(t.height,e.height+r));for(let o=0;o<h.height;o++)for(let s=0;s<h.width;s++){let a=i(t.read(r<0?o+r:o,l<0?s+l:s),e.read(r>0?o-r:o,l>0?s-l:s));a&&(h._memory2D[o][s]=a)}return h}constructor(){if(1===arguments.length&&(this.memory2D=arguments[0]),2===arguments.length&&"number"==typeof arguments[0]){if("string"==typeof arguments[1])return void this._init1D([...arguments[1]],arguments[0]);if(Array.isArray(arguments[1]))return void this._init1D(arguments[1],arguments[0])}if(2!==arguments.length||"number"!=typeof arguments[0]||"number"!=typeof arguments[1])return 2===arguments.length&&"number"==typeof arguments[0]&&"number"!=typeof arguments[1]?(this._memory2D=Array(Math.round(arguments[0]*arguments[1].height/arguments[1].width)).fill().map((()=>Array(arguments[0]).fill(0))),void this.from(arguments[1])):3===arguments.length&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]?(this._memory2D=Array(Math.ceil(arguments[1].toString(2).length/arguments[0])).fill().map((()=>Array(arguments[0]).fill(0))),void this.from(arguments[1],arguments[2])):4===arguments.length&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]&&"number"==typeof arguments[2]?(this._memory2D=Array(arguments[1]).fill().map((()=>Array(arguments[0]).fill(0))),void this.rand(arguments[2],arguments[3])):void 0;this._memory2D=Array(arguments[1]).fill().map((()=>Array(arguments[0]).fill(0)))}_init1D(t,e=t.length){let i=Math.ceil(t.length/e);this._memory2D=new Array(i);for(let r=0;r<i;r++){let i=e*r,l=i+e;this._memory2D[r]=this._format(t.slice(i,l),e)}}_format(t,e){for(let e=0;e<t.length;e++)"number"==typeof t[e]||"string"==typeof t[e]||Array.isArray(t[e])||t[e]instanceof p5.Color||t[e]instanceof p5.Image||(t[e]=0);return t.length<e?t.concat(new Array(e-t.length).fill(0)):t}set memory2D(t){if("string"!=typeof t){if(Array.isArray(t)){if(!Array.isArray(t[0]))return void this._init1D(t);let e,i=t.map((t=>t.slice()));for(const t of i){if(!Array.isArray(t))throw new Error("Not 2D Array");e?e<t.length&&(e=t.length):e=t.length}for(let t=0;t<i.length;t++)i[t]=this._format(i[t],e);this._memory2D=i}}else this._init1D([...t])}get memory2D(){return this.clone()._memory2D}set width(t){this.transpose(),this.height=t,this.transpose()}get width(){return this._memory2D[0].length}set height(t){let e=t-this.height;for(;this.height!==t;)e>0?this.insert(this.height):this.delete(this.height-1)}get height(){return this._memory2D.length}get size(){return this.width*this.height}get order(){let t=0;for(let e=0;e<this.height;e++)for(let i=0;i<this.width;i++)this._memory2D[e][i]&&t++;return t}from(){if(1===arguments.length&&arguments[0]instanceof p5.Image){let t=arguments[0];t.loadPixels();let e=Array(this.height).fill().map((()=>Array(this.width).fill(0))),i=Array(this.height).fill().map((()=>Array(this.width).fill(0))),r=Array(this.height).fill().map((()=>Array(this.width).fill(0))),l=Array(this.height).fill().map((()=>Array(this.width).fill(0))),h=Array(this.height).fill().map((()=>Array(this.width).fill(0)));for(let o=0;o<t.pixels.length/4;o++){let s=this._fromIndex(o,t.width),a=Math.floor(s.row*this.height/t.height),n=Math.floor(s.col*this.width/t.width);e[a][n]+=t.pixels[4*o],i[a][n]+=t.pixels[4*o+1],r[a][n]+=t.pixels[4*o+2],l[a][n]+=t.pixels[4*o+3],h[a][n]+=1}t.updatePixels();for(let t=0;t<this.height;t++)for(let o=0;o<this.width;o++)this._memory2D[t][o]=[e[t][o]/h[t][o],i[t][o]/h[t][o],r[t][o]/h[t][o],l[t][o]/h[t][o]]}if(2===arguments.length&&"number"==typeof arguments[0]){let t=this.width*this.height,e=Math.abs(Math.round(arguments[0]));if(e.toString(2).length>t)throw new Error("Value is to high to fill quadrille");for(let i=0;i<=t-1;i++)e&1<<t-1-i&&(this._memory2D[this._fromIndex(i).row][this._fromIndex(i).col]=arguments[1])}}_fromIndex(t,e=this.width){return{row:t/e|0,col:t%e}}_toIndex(t,e,i=this.width){return t*i+e}toInt(){let t=0;for(let e=0;e<this.height;e++)for(let i=0;i<this.width;i++)this._memory2D[e][i]&&(t+=Math.pow(2,this.width*(this.height-e)-(i+1)));return t}toArray(){let t=this.clone()._memory2D,e=new Array;for(let i=0;i<t.length;i++)e=e.concat(t[i]);return e}magnitude(t){let e=0;for(let i=0;i<this.width;i++)this._memory2D[t][i]&&e++;return e}replace(t,e){for(let i=0;i<this.height;i++)for(let r=0;r<this.width;r++)this._memory2D[i][r]===t&&(this._memory2D[i][r]=e)}fill(){if(1===arguments.length)for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++)this._memory2D[t][e]&&(this._memory2D[t][e]=arguments[0]??0);2===arguments.length&&"number"==typeof arguments[0]&&arguments[0]>=0&&arguments[0]<this.height&&this._memory2D[arguments[0]].fill(arguments[1]??0),3===arguments.length&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]&&arguments[0]>=0&&arguments[0]<this.height&&arguments[1]>=0&&arguments[1]<this.width&&(this._memory2D[arguments[0]][arguments[1]]=arguments[2]??0)}read(t,e){if(t>=0&&t<this.height&&e>=0&&e<this.width)return this._memory2D[t][e]}filter(t,e=0,i=0){if(t.size%2==1&&t.width===t.height&&this.size>=t.size){let r=(t.width-1)/2;if(0==e||0==i)for(let e=r;e<this.height-r;e++)for(let i=r;i<this.width-r;i++)this._conv(t,e,i,r);else this._conv(t,e,i,r)}}_conv(t,e,i,r=(t.width-1)/2){if(e>=r&&i>=r&&e<this.height-r&&i<this.width-r){let l=0,h=0,o=0;for(let s=0;s<t.height;s++)for(let a=0;a<t.width;a++){let n=e+s-r,m=i+a-r,g=this._memory2D[n][m],c=t._memory2D[s][a];if((g instanceof p5.Color||Array.isArray(g))&&"string"!=typeof c&&!(c instanceof p5.Image)){let t="number"==typeof c?c:.299*red(c)+.587*green(c)+.114*blue(c);l+=red(g)*t,h+=green(g)*t,o+=blue(g)*t}}l=constrain(l,0,255),h=constrain(h,0,255),o=constrain(o,0,255),this._memory2D[e][i]=color(l,h,o)}}colorizeTriangle(t,e,i,r,l,h,o,s=o,a=o){this.rasterizeTriangle(t,e,i,r,l,h,(({pattern:t})=>color(t)),[red(o),green(o),blue(o),alpha(o)],[red(s),green(s),blue(s),alpha(s)],[red(a),green(a),blue(a),alpha(a)])}colorize(t,e=t,i=t,r=t){this.colorizeTriangle(0,0,this.height-1,0,0,this.width-1,t,e,i),this.colorizeTriangle(this.height-1,0,0,this.width-1,this.height-1,this.width-1,e,i,r)}rasterizeTriangle(t,e,i,r,l,h,o,s,a=s,n=s){if(Array.isArray(s)&&Array.isArray(a)&&Array.isArray(n))for(let m=0;m<this.height;m++)for(let g=0;g<this.width;g++){let c=this._barycentric_coords(m,g,t,e,i,r,l,h);if(c.w0>=0&&c.w1>=0&&c.w2>=0){let t=Math.max(s.length,a.length,n.length),e=new Array(t);for(let t=0;t<e.length;t++)e[t]=(s[t]??0)*c.w0+(a[t]??0)*c.w1+(n[t]??0)*c.w2;this._memory2D[m][g]=o({pattern:e,row:m,col:g})}}}rasterize(t,e,i=e,r=e,l=e){this.rasterizeTriangle(0,0,this.height-1,0,0,this.width-1,t,e,i,r),this.rasterizeTriangle(this.height-1,0,0,this.width-1,this.height-1,this.width-1,t,i,r,l)}_barycentric_coords(t,e,i,r,l,h,o,s){let a=this._edge_functions(t,e,i,r,l,h,o,s),n=this._parallelogram_area(i,r,l,h,o,s);return{w0:a.e12/n,w1:a.e20/n,w2:a.e01/n}}_parallelogram_area(t,e,i,r,l,h){return(r-e)*(l-t)-(h-e)*(i-t)}_edge_functions(t,e,i,r,l,h,o,s){return{e01:(i-l)*e+(h-r)*t+(r*l-i*h),e12:(l-o)*e+(s-h)*t+(h*o-l*s),e20:(o-i)*e+(r-s)*t+(s*i-o*r)}}rand(t,e){(t=Math.abs(t))>this.size&&(t=this.size);let i=this.order,r=0;for(;r<Math.abs(t-i);){let l=this._fromIndex(Math.floor(Math.random()*this.size));(t>i?!this._memory2D[l.row][l.col]:this._memory2D[l.row][l.col])&&(this._memory2D[l.row][l.col]=t>i?e:0,r++)}}randomize(){let t=this.clone();this.clear();for(let e=0;e<t.height;e++)for(let i=0;i<t.width;i++)if(t._memory2D[e][i]){let r,l;do{r=int(random(this.height)),l=int(random(this.width))}while(this._memory2D[r][l]);this._memory2D[r][l]=t._memory2D[e][i]}}insert(t){this._memory2D.splice(t,0,Array(this.width).fill(0))}delete(t){this.height>1&&t>=0&&t<this.height&&this._memory2D.splice(t,1)}clear(){0===arguments.length&&(this._memory2D=this._memory2D.map((t=>t.map((t=>0))))),1===arguments.length&&"number"==typeof arguments[0]&&this._memory2D[arguments[0]].fill(0),2===arguments.length&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]&&(this._memory2D[arguments[0]][arguments[1]]=0)}reflect(){this._memory2D.reverse()}transpose(){this._memory2D=this._memory2D[0].map(((t,e)=>this._memory2D.map((t=>t[e]))))}rotate(){this._memory2D=this._memory2D[0].map(((t,e)=>this._memory2D.map((t=>t[e])).reverse()))}clone(){return new Quadrille(this._memory2D.map((t=>t.slice())))}sort({mode:t="LUMA",target:e="magenta",ascending:i=!0,charColor:r="black",background:l=this.BACKGROUND,cellLength:h=this.width,numberColor:o=this.numberColor,min:s=0,max:a=0}={}){let n=this.toArray();switch(t){case"DISTANCE":n.sort(((t,i)=>{let n=Quadrille.sample({cell:t,background:l,cellLength:h,charColor:r,numberColor:o,min:s,max:a}),m=Quadrille.sample({cell:i,background:l,cellLength:h,charColor:r,numberColor:o,min:s,max:a});return Math.sqrt(Math.pow(n.r/n.total-red(e),2)+Math.pow(n.g/n.total-green(e),2)+Math.pow(n.b/n.total-blue(e),2)+Math.pow(n.a/n.total-alpha(e),2))-Math.sqrt(Math.pow(m.r/m.total-red(e),2)+Math.pow(m.g/m.total-green(e),2)+Math.pow(m.b/m.total-blue(e),2)+Math.pow(m.a/m.total-alpha(e),2))}));break;case"AVG":n.sort(((t,e)=>{let i=Quadrille.sample({cell:t,background:l,cellLength:h,charColor:r,numberColor:o,min:s,max:a}),n=Quadrille.sample({cell:e,background:l,cellLength:h,charColor:r,numberColor:o,min:s,max:a});return.333*i.r+.333*i.g+.333*i.b-(.333*n.r+.333*n.g+.333*n.b)}));break;default:n.sort(((t,e)=>{let i=Quadrille.sample({cell:t,background:l,cellLength:h,charColor:r,numberColor:o,min:s,max:a}),n=Quadrille.sample({cell:e,background:l,cellLength:h,charColor:r,numberColor:o,min:s,max:a});return.299*i.r+.587*i.g+.114*i.b-(.299*n.r+.587*n.g+.114*n.b)}))}this._init1D(n=i?n:n.reverse(),this.width)}static sample({cell:t,charColor:e="black",background:i=this.BACKGROUND,cellLength:r=this.CELL_LENGTH,numberColor:l=this.numberColor,min:h=0,max:o=0}={}){let s,a,n,m,g=createGraphics(r,r);g.background(i),t instanceof p5.Color||Array.isArray(t)?Quadrille.COLOR({graphics:g,outlineWeight:0,cell:t,cellLength:r}):t instanceof p5.Image?Quadrille.IMAGE({graphics:g,outlineWeight:0,cell:t,cellLength:r}):"string"==typeof t?Quadrille.CHAR({graphics:g,charColor:e,outlineWeight:0,cell:t,cellLength:r}):"number"==typeof t&&Quadrille.NUMBER({graphics:g,outlineWeight:0,cell:t,cellLength:r,numberColor:l,min:h,max:o}),g.loadPixels(),s=a=n=m=0;let c=g.pixels.length/4;for(let t=0;t<c;t++)s+=g.pixels[4*t],a+=g.pixels[4*t+1],n+=g.pixels[4*t+2],m+=g.pixels[4*t+3];return g.updatePixels(),{r:s,g:a,b:n,a:m,total:c}}static COLOR({graphics:t,cell:e=color("red"),cellLength:i=this.CELL_LENGTH,outline:r=this.OUTLINE,outlineWeight:l=this.OUTLINE_WEIGHT}={}){t.push(),t.stroke(r),t.strokeWeight(l),t.fill(e),t.rect(0,0,i,i),t.pop()}static IMAGE({graphics:t,cell:e=null,outline:i=this.OUTLINE,outlineWeight:r=this.OUTLINE_WEIGHT,cellLength:l=this.CELL_LENGTH}={}){e&&(t.push(),t.image(e,0,0,l,l),t.pop(),0!==r&&(t.push(),t.noFill(),t.stroke(i),t.strokeWeight(r),t.rect(0,0,l,l),t.pop()))}static CHAR({graphics:t,cell:e="?",charColor:i=this.CHAR_COLOR,outline:r=this.OUTLINE,outlineWeight:l=this.OUTLINE_WEIGHT,cellLength:h=this.CELL_LENGTH}={}){t.push(),t.noStroke(),t.fill(i),t.textSize(h),t.text(e,0,0,h,h),t.pop(),0!==l&&(t.push(),t.noFill(),t.stroke(r),t.strokeWeight(l),t.rect(0,0,h,h),t.pop())}static NUMBER({graphics:t,cell:e=0,outline:i=this.OUTLINE,outlineWeight:r=this.OUTLINE_WEIGHT,min:l=0,max:h=0,numberColor:o=this.NUMBER_COLOR,cellLength:s=this.CELL_LENGTH}={}){l<h&&(t.push(),t.colorMode(t.RGB,255),t.fill(t.color(red(o),green(o),blue(o),t.map(e,l,h,0,255))),t.rect(0,0,s,s),t.pop()),0!==r&&(t.push(),t.noFill(),t.stroke(i),t.strokeWeight(r),t.rect(0,0,s,s),t.pop())}static FRAME({graphics:t,outline:e=this.OUTLINE,outlineWeight:i=this.OUTLINE_WEIGHT,cellLength:r=this.CELL_LENGTH}={}){0!==i&&(t.push(),t.noFill(),t.stroke(e),t.strokeWeight(i),t.rect(0,0,r,r),t.pop())}}console.log({LIBRARY:"p5.quadrille.js",VERSION:"0.9.5",HOMEPAGE:"https://github.com/objetos/p5.quadrille.js"}),p5.prototype.createQuadrille=function(){return new Quadrille(...arguments)},p5.prototype.drawQuadrille=function(t,{graphics:e=this,pixelX:i=0,pixelY:r=0,row:l=0,col:h=0,tile:o,contour:s,cellLength:a=Quadrille.CELL_LENGTH,outlineWeight:n=Quadrille.OUTLINE_WEIGHT,outline:m=Quadrille.OUTLINE,charColor:g=Quadrille.CHAR_COLOR,board:c=!1,numberColor:u=Quadrille.NUMBER_COLOR,min:p=0,max:d=0}={}){e.push(),e.translate(i>0?i:h*a,r>0?r:l*a);for(let i=0;i<t.height;i++)for(let r=0;r<t.width;r++){e.push(),e.translate(r*a,i*a);let l=t._memory2D[i][r];l?o?o({graphics:e,cell:l,outline:m,outlineWeight:n,cellLength:a,row:i,col:r,numberColor:u,min:p,max:d}):l instanceof p5.Color||Array.isArray(l)?Quadrille.COLOR({graphics:e,cell:l,outline:m,outlineWeight:n,cellLength:a}):l instanceof p5.Image?Quadrille.IMAGE({graphics:e,cell:l,outline:m,outlineWeight:n,cellLength:a}):"string"==typeof l?Quadrille.CHAR({graphics:e,cell:l,charColor:g,outline:m,outlineWeight:n,cellLength:a}):"number"==typeof l&&Quadrille.NUMBER({graphics:e,cell:l,outline:m,outlineWeight:n,numberColor:u,min:p,max:d,cellLength:a}):c&&(s?s({graphics:e,cell:l,outline:m,outlineWeight:n,cellLength:a,row:i,col:r,numberColor:u,min:p,max:d}):Quadrille.FRAME({graphics:e,outline:m,outlineWeight:n,cellLength:a})),e.pop()}e.pop()};
//# sourceMappingURL=/sm/b49b9f627b67ec21bf41c6a48a92d007f5afbb4cfb174fb9f2cb2b4489225773.map